// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repositories/media.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	models "w3st/domain/models"
	errors "w3st/errors"

	gomock "github.com/golang/mock/gomock"
)

// MockMediaRepository is a mock of MediaRepository interface.
type MockMediaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMediaRepositoryMockRecorder
}

// MockMediaRepositoryMockRecorder is the mock recorder for MockMediaRepository.
type MockMediaRepositoryMockRecorder struct {
	mock *MockMediaRepository
}

// NewMockMediaRepository creates a new mock instance.
func NewMockMediaRepository(ctrl *gomock.Controller) *MockMediaRepository {
	mock := &MockMediaRepository{ctrl: ctrl}
	mock.recorder = &MockMediaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaRepository) EXPECT() *MockMediaRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMediaRepository) Create(ctx context.Context, media *models.MediaAsset) *errors.DomainError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, media)
	ret0, _ := ret[0].(*errors.DomainError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMediaRepositoryMockRecorder) Create(ctx, media interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMediaRepository)(nil).Create), ctx, media)
}

// Delete mocks base method.
func (m *MockMediaRepository) Delete(ctx context.Context, id string) *errors.DomainError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*errors.DomainError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMediaRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMediaRepository)(nil).Delete), ctx, id)
}

// FindByID mocks base method.
func (m *MockMediaRepository) FindByID(ctx context.Context, id string) (*models.MediaAsset, *errors.DomainError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*models.MediaAsset)
	ret1, _ := ret[1].(*errors.DomainError)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockMediaRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMediaRepository)(nil).FindByID), ctx, id)
}

// FindByUserID mocks base method.
func (m *MockMediaRepository) FindByUserID(ctx context.Context, userID string) ([]*models.MediaAsset, *errors.DomainError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.MediaAsset)
	ret1, _ := ret[1].(*errors.DomainError)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockMediaRepositoryMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockMediaRepository)(nil).FindByUserID), ctx, userID)
}

// Update mocks base method.
func (m *MockMediaRepository) Update(ctx context.Context, media *models.MediaAsset) *errors.DomainError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, media)
	ret0, _ := ret[0].(*errors.DomainError)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMediaRepositoryMockRecorder) Update(ctx, media interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMediaRepository)(nil).Update), ctx, media)
}
