// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repositories/collections.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	models "w3st/domain/models"

	gomock "github.com/golang/mock/gomock"
)

// MockCollectionsRepository is a mock of CollectionsRepository interface.
type MockCollectionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionsRepositoryMockRecorder
}

// MockCollectionsRepositoryMockRecorder is the mock recorder for MockCollectionsRepository.
type MockCollectionsRepositoryMockRecorder struct {
	mock *MockCollectionsRepository
}

// NewMockCollectionsRepository creates a new mock instance.
func NewMockCollectionsRepository(ctrl *gomock.Controller) *MockCollectionsRepository {
	mock := &MockCollectionsRepository{ctrl: ctrl}
	mock.recorder = &MockCollectionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionsRepository) EXPECT() *MockCollectionsRepositoryMockRecorder {
	return m.recorder
}

// CreateCollection mocks base method.
func (m *MockCollectionsRepository) CreateCollection(newCollection *models.ApiCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", newCollection)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockCollectionsRepositoryMockRecorder) CreateCollection(newCollection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockCollectionsRepository)(nil).CreateCollection), newCollection)
}

// GetCollectionByProjectId mocks base method.
func (m *MockCollectionsRepository) GetCollectionByProjectId(projectId int) ([]models.ApiCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionByProjectId", projectId)
	ret0, _ := ret[0].([]models.ApiCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionByProjectId indicates an expected call of GetCollectionByProjectId.
func (mr *MockCollectionsRepositoryMockRecorder) GetCollectionByProjectId(projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionByProjectId", reflect.TypeOf((*MockCollectionsRepository)(nil).GetCollectionByProjectId), projectId)
}

// GetCollectionsByCollectionId mocks base method.
func (m *MockCollectionsRepository) GetCollectionsByCollectionId(collectionId, projectId int) (*models.ApiCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionsByCollectionId", collectionId, projectId)
	ret0, _ := ret[0].(*models.ApiCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionsByCollectionId indicates an expected call of GetCollectionsByCollectionId.
func (mr *MockCollectionsRepositoryMockRecorder) GetCollectionsByCollectionId(collectionId, projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionsByCollectionId", reflect.TypeOf((*MockCollectionsRepository)(nil).GetCollectionsByCollectionId), collectionId, projectId)
}
