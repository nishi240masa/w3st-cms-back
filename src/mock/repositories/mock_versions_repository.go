// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repositories/versions.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"
	models "w3st/domain/models"
	errors "w3st/errors"

	gomock "github.com/golang/mock/gomock"
)

// MockVersionRepository is a mock of VersionRepository interface.
type MockVersionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVersionRepositoryMockRecorder
}

// MockVersionRepositoryMockRecorder is the mock recorder for MockVersionRepository.
type MockVersionRepositoryMockRecorder struct {
	mock *MockVersionRepository
}

// NewMockVersionRepository creates a new mock instance.
func NewMockVersionRepository(ctrl *gomock.Controller) *MockVersionRepository {
	mock := &MockVersionRepository{ctrl: ctrl}
	mock.recorder = &MockVersionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionRepository) EXPECT() *MockVersionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVersionRepository) Create(ctx context.Context, version *models.ContentVersion) *errors.DomainError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, version)
	ret0, _ := ret[0].(*errors.DomainError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVersionRepositoryMockRecorder) Create(ctx, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVersionRepository)(nil).Create), ctx, version)
}

// Delete mocks base method.
func (m *MockVersionRepository) Delete(ctx context.Context, id string) *errors.DomainError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*errors.DomainError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVersionRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVersionRepository)(nil).Delete), ctx, id)
}

// FindByContentID mocks base method.
func (m *MockVersionRepository) FindByContentID(ctx context.Context, contentID string) ([]*models.ContentVersion, *errors.DomainError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByContentID", ctx, contentID)
	ret0, _ := ret[0].([]*models.ContentVersion)
	ret1, _ := ret[1].(*errors.DomainError)
	return ret0, ret1
}

// FindByContentID indicates an expected call of FindByContentID.
func (mr *MockVersionRepositoryMockRecorder) FindByContentID(ctx, contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByContentID", reflect.TypeOf((*MockVersionRepository)(nil).FindByContentID), ctx, contentID)
}

// FindByID mocks base method.
func (m *MockVersionRepository) FindByID(ctx context.Context, id string) (*models.ContentVersion, *errors.DomainError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*models.ContentVersion)
	ret1, _ := ret[1].(*errors.DomainError)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockVersionRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockVersionRepository)(nil).FindByID), ctx, id)
}

// FindLatestByContentID mocks base method.
func (m *MockVersionRepository) FindLatestByContentID(ctx context.Context, contentID string) (*models.ContentVersion, *errors.DomainError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByContentID", ctx, contentID)
	ret0, _ := ret[0].(*models.ContentVersion)
	ret1, _ := ret[1].(*errors.DomainError)
	return ret0, ret1
}

// FindLatestByContentID indicates an expected call of FindLatestByContentID.
func (mr *MockVersionRepositoryMockRecorder) FindLatestByContentID(ctx, contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByContentID", reflect.TypeOf((*MockVersionRepository)(nil).FindLatestByContentID), ctx, contentID)
}
