// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repositories/permissions.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"
	models "w3st/domain/models"
	errors "w3st/errors"

	gomock "github.com/golang/mock/gomock"
)

// MockPermissionRepository is a mock of PermissionRepository interface.
type MockPermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionRepositoryMockRecorder
}

// MockPermissionRepositoryMockRecorder is the mock recorder for MockPermissionRepository.
type MockPermissionRepositoryMockRecorder struct {
	mock *MockPermissionRepository
}

// NewMockPermissionRepository creates a new mock instance.
func NewMockPermissionRepository(ctrl *gomock.Controller) *MockPermissionRepository {
	mock := &MockPermissionRepository{ctrl: ctrl}
	mock.recorder = &MockPermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionRepository) EXPECT() *MockPermissionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPermissionRepository) Create(ctx context.Context, permission *models.UserPermission) *errors.DomainError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, permission)
	ret0, _ := ret[0].(*errors.DomainError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPermissionRepositoryMockRecorder) Create(ctx, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPermissionRepository)(nil).Create), ctx, permission)
}

// Delete mocks base method.
func (m *MockPermissionRepository) Delete(ctx context.Context, id string) *errors.DomainError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*errors.DomainError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPermissionRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPermissionRepository)(nil).Delete), ctx, id)
}

// FindByID mocks base method.
func (m *MockPermissionRepository) FindByID(ctx context.Context, id string) (*models.UserPermission, *errors.DomainError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*models.UserPermission)
	ret1, _ := ret[1].(*errors.DomainError)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPermissionRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPermissionRepository)(nil).FindByID), ctx, id)
}

// FindByUserID mocks base method.
func (m *MockPermissionRepository) FindByUserID(ctx context.Context, userID string) ([]*models.UserPermission, *errors.DomainError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.UserPermission)
	ret1, _ := ret[1].(*errors.DomainError)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockPermissionRepositoryMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockPermissionRepository)(nil).FindByUserID), ctx, userID)
}

// FindByUserIDAndResource mocks base method.
func (m *MockPermissionRepository) FindByUserIDAndResource(ctx context.Context, userID, resource string) ([]*models.UserPermission, *errors.DomainError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDAndResource", ctx, userID, resource)
	ret0, _ := ret[0].([]*models.UserPermission)
	ret1, _ := ret[1].(*errors.DomainError)
	return ret0, ret1
}

// FindByUserIDAndResource indicates an expected call of FindByUserIDAndResource.
func (mr *MockPermissionRepositoryMockRecorder) FindByUserIDAndResource(ctx, userID, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDAndResource", reflect.TypeOf((*MockPermissionRepository)(nil).FindByUserIDAndResource), ctx, userID, resource)
}
